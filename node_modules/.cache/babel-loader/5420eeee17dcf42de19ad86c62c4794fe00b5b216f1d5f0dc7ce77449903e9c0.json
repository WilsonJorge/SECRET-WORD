{"ast":null,"code":"var _jsxFileName = \"G:\\\\PROJECTOS\\\\React Js\\\\SECRET_WORD\\\\secret-word\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// CSS\nimport './App.css';\n\n// React\nimport { useCallback, useEffect, useState } from \"react\";\n\n//Data\n\nimport { wordsList } from \"./data/words\";\n\n//Compentes\nimport StartScren from './componentes/StartScren';\nimport Game from './componentes/Game';\nimport GameOver from './componentes/GameOver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [{\n  id: 1,\n  name: \"start\"\n}, {\n  id: 2,\n  name: \"game\"\n}, {\n  id: 3,\n  name: \"end\"\n}];\nfunction App() {\n  _s();\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n  const [pickedWord, setpickedWord] = useState(\"\");\n  const [pickedCategory, setpickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  //Chamada da Tela Inicial 1\n\n  //Vamos criar uma funcao para pegar as palavras e as categorias\n\n  const pickWordAndCategory = () => {\n    const categories = Object.keys(words);\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)];\n\n    // Funcao para pegar a palavra escolhida \n    const word = words[category][Math.floor(Math.random() * words[category].length)];\n    console.log(word);\n    return {\n      word,\n      category\n    };\n  };\n  const startGame = () => {\n    const {\n      word,\n      category\n    } = pickWordAndCategory();\n\n    //Criar array de letras\n    let wordLetters = word.split(\"\");\n    wordLetters = wordLetters.map(l => l.toLowerCase());\n    console.log(word, category);\n    console.log(wordLetters);\n    setGameStage(stages[1].name);\n  };\n\n  //Processar as entradas\n  const verifyletter = () => {\n    setGameStage(stages[2].name);\n  };\n\n  //Recomecar o jogo\n  const retry = () => {\n    setGameStage(stages[0].name);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStage === \"start\" && /*#__PURE__*/_jsxDEV(StartScren, {\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 31\n    }, this), gameStage === \"game\" && /*#__PURE__*/_jsxDEV(Game, {\n      verifyletter: verifyletter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 30\n    }, this), gameStage === \"end\" && /*#__PURE__*/_jsxDEV(GameOver, {\n      retry: retry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cNRfBBc36xoAgBG422mFVAxzwa4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useEffect","useState","wordsList","StartScren","Game","GameOver","stages","id","name","App","gameStage","setGameStage","words","pickedWord","setpickedWord","pickedCategory","setpickedCategory","letters","setLetters","pickWordAndCategory","categories","Object","keys","category","Math","floor","random","length","word","console","log","startGame","wordLetters","split","map","l","toLowerCase","verifyletter","retry"],"sources":["G:/PROJECTOS/React Js/SECRET_WORD/secret-word/src/App.js"],"sourcesContent":["// CSS\nimport './App.css';\n\n// React\nimport {useCallback,useEffect,useState} from \"react\";\n\n//Data\n\nimport {wordsList} from \"./data/words\";\n\n//Compentes\nimport StartScren from './componentes/StartScren';\nimport Game from './componentes/Game';\nimport GameOver from './componentes/GameOver';\n\nconst stages=[\n  {id: 1,name :\"start\"},\n  {id: 2,name :\"game\"},\n  {id: 3,name :\"end\"},\n]\nfunction App() {\n  const [gameStage,setGameStage] =useState(stages[0].name);\n  const[words]=useState(wordsList);\n\n  const [pickedWord,setpickedWord] = useState(\"\");\n  const [pickedCategory,setpickedCategory] = useState(\"\");\n  const [letters,setLetters] = useState([]);\n  //Chamada da Tela Inicial 1\n\n  //Vamos criar uma funcao para pegar as palavras e as categorias\n\n  const pickWordAndCategory =()=>{\n    const categories = Object.keys(words);\n    const category = categories[Math.floor(Math.random()*Object.keys(categories).length)];\n\n   // Funcao para pegar a palavra escolhida \n  const word = words[category][Math.floor(Math.random()*words[category].length)];\n   console.log(word);\n\n   return{word,category};\n  };\n\n  const startGame =() =>{\n    const {word,category} =pickWordAndCategory();\n    \n\n    //Criar array de letras\n    let wordLetters = word.split(\"\");\n\n    wordLetters =wordLetters.map((l)=>l.toLowerCase());\n    console.log(word,category);\n    console.log(wordLetters);\n    setGameStage(stages[1].name);\n  };\n\n  //Processar as entradas\n  const verifyletter =() =>{\n    setGameStage(stages[2].name);\n  };\n\n  //Recomecar o jogo\n  const retry =() =>{\n    setGameStage(stages[0].name);\n  }\n  return (\n    <div className=\"App\">\n      {gameStage===\"start\" && <StartScren startGame={startGame}/>}\n      {gameStage===\"game\" && <Game verifyletter ={verifyletter}/>}\n      {gameStage===\"end\" && <GameOver retry= {retry}/>}\n\n      \n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}